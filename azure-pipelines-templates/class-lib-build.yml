# Copyright (c) 2018 The nanoFramework project contributors
# Portions Copyright (c) Sankarsan Kampa (a.k.a. k3rn31p4nic).  All rights reserved.
# See LICENSE file in the project root for full license information.

parameters:
  sourceFileName: ''
  classLibName: ''
  skipNativeUpdate: false
  skipNuGetRestore: false
  gitUser: 'nfbot'
  gitEmail: 'nanoframework@outlook.com'

steps:
# need this here in order to persist GitHub credentials 
- checkout: self

- script: |
    git config --global user.email ${{ parameters.gitEmail }}
    git config --global user.name ${{ parameters.gitUser }}
  displayName: Setup git identity

- task: NuGetToolInstaller@0

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
    feedsToUse: config
    nugetConfigPath: source/NuGet.config
  condition: and( succeeded(), not( ${{ parameters.skipNuGetRestore }} ) )
  displayName: NuGet restore

- task: InstallnFBuildComponents@1
  displayName: Install nanoFramework MSBuild components

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    msbuildArgs: '/p:PublicRelease=true'
    configuration: '$(buildConfiguration)'

# we don't have tests (yet)
# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

- task: PowerShell@2
  inputs:
      targetType: 'inline'
      script: |
          $MyNuGetVersion = $env:NBGV_NuGetPackageVersion -replace "\-g$env:NBGV_GitCommitIdShort", ""

          # replace preview with alpha if this is a PR build
          if($env:Build_Reason -eq 'PullRequest')
          {
            $MyNuGetVersion = $MyNuGetVersion -replace "preview", "alpha"
          }

          Write-Host "NuGet build number is $MyNuGetVersion"

          Write-Host "$("##vso[task.setvariable variable=MY_NUGET_VERSION]")$MyNuGetVersion"
  condition: succeeded()
  displayName: Get NuGet build number

- task: UseRubyVersion@0
  inputs:
    versionSpec: '>= 2.4' 
    addToPath: true
  condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ) )
  displayName: Setup Ruby

# generate change log
- powershell: |
      gem install github_changelog_generator --quiet --no-ri --no-rdoc
      # need to call it passing both cache options with full path otherwise it won't work
      github_changelog_generator --token $(GitHubToken) --cache-log  $env:AGENT_TEMPDIRECTORY\github-changelog-logger.log --cache-file $env:AGENT_TEMPDIRECTORY\github-changelog-http-cache
  condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), not( startsWith(variables['Build.SourceBranchName'], 'master') ), not( contains(variables['Build.SourceBranchName'], 'update-dependencies') ) )
  displayName: Generate change log

# generate change log including future version
- powershell: |
      gem install github_changelog_generator --quiet --no-ri --no-rdoc
      # need to call it passing both cache options with full path otherwise it won't work
      github_changelog_generator --token $(GitHubToken) --cache-log  $env:AGENT_TEMPDIRECTORY\github-changelog-logger.log --cache-file $env:AGENT_TEMPDIRECTORY\github-changelog-http-cache --future-release v$env:MY_NUGET_VERSION
  condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), startsWith(variables['Build.SourceBranchName'], 'master'), not( contains(variables['Build.SourceBranchName'], 'update-dependencies') ) )
  displayName: Generate change log

# copy change log to artifacts directory
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: 'CHANGELOG.md'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
  condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), not( contains(variables['Build.SourceBranchName'], 'update-dependencies') ) )
  displayName: Copy Changelog

# push new changelog to GitHub repo
- task: PowerShell@2
  inputs:
      targetType: 'inline'
      script: |
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG for v$(NBGV_Version)" -m"***NO_CI***"

          git config user.email ${{ parameters.gitEmail }}
          git config user.name ${{ parameters.gitUser }}
          
          # compute authorization header in format "AUTHORIZATION: basic 'encoded token'"
          # 'encoded token' is the Base64 of the string "nfbot:personal-token"
          $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:$(GitHubToken)"))))"

          git -c http.extraheader="AUTHORIZATION: $auth" push origin "HEAD:$(Build.SourceBranchName)"

  condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), not( contains(variables['Build.SourceBranchName'], 'update-dependencies') ) )
  displayName: Push changelog to GitHub

# update could build number (only possible if this is not a PR from a fork)
- task: PowerShell@2
  inputs:
      targetType: 'inline'
      script: Write-Host "$("##vso[build.updatebuildnumber]")$env:NBGV_NuGetPackageVersion"
  condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true) )
  displayName: Update cloud build number

- task: NuGetCommand@2
  inputs:
    command: 'custom' 
    arguments: 'pack source\$(nugetPackageName).nuspec -Version $(MY_NUGET_VERSION) -Symbols'
  condition: succeeded()
  displayName: Pack NuGet with class library

# - task: NuGetCommand@2
#   inputs:
#     command: 'custom' 
#     arguments: 'pack source\$(nugetPackageName).DELIVERABLES.nuspec -Version $(MY_NUGET_VERSION) -Symbols'
#     displayName: Pack NuGet with build deliverables class library

- task: CopyFiles@1
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    Contents: |
      **\$(nugetPackageName)*.nupkg
      **\CHANGELOG.md
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true
  condition: succeeded()
  displayName: Collecting deployable artifacts

# publish artifacts (only possible if this is not a PR originated on a fork)
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: deployables
    ArtifactType: Container
  condition: and( succeeded(), ne(variables['system.pullrequest.isfork'], true) )
  displayName: Publish deployables artifacts

# push NuGet packages to MyGet feed (always happens except on PR builds)
- task: NuGetCommand@2
  inputs:
    command: push
    nuGetFeedType: external
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishFeedCredentials: 'MyGet'
  condition: succeeded()
  displayName: Push NuGet packages to MyGet

# push NuGet class lib package to NuGet (happens on tag builds for any branch)
- task: NuGetCommand@2
  inputs:
    command: push
    nuGetFeedType: external
    allowPackageConflicts: true
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishFeedCredentials: 'NuGet'
  condition: and( succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v') )
  continueOnError: true
  displayName: Push NuGet packages to NuGet

# create or update GitHub release
- task: GitHubReleasePublish@1
  inputs:
    githubEndpoint: 'nanoframework'
    githubOwner: 'nanoframework'
    githubRepositoryName: $(repoName)
    githubTag: v$(MY_NUGET_VERSION)
    githubReleaseTitle: '$(nugetPackageName) Library v$(MY_NUGET_VERSION)'
    githubReleaseNotes: 'Check the [changelog]($(Build.Repository.Uri)/blob/$(Build.SourceBranchName)/CHANGELOG.md).<br><br><h4>Install from nanoFramework MyGet development feed</h4><br>The following NuGet packages are available for download from this release:<br>:package: [.NET](https://www.myget.org/feed/nanoframework-dev/package/nuget/$(nugetPackageName)/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION).'
    githubTargetCommitsh: $(Build.SourceVersion)
    githubReleaseDraft: true
    githubReleasePrerelease: true
    githubReuseDraftOnly: true
    githubReuseRelease: true
    githubEditRelease: true
    githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/$(nugetPackageName).$(MY_NUGET_VERSION).nupkg'
  condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ) )
  displayName: Create/Update GitHub release

# create or update GitHub release ON tags from release or master branches
- task: GitHubReleasePublish@1
  inputs:
    githubEndpoint: 'nanoframework'
    githubOwner: 'nanoframework'
    githubRepositoryName: $(repoName)
    githubTag: v$(MY_NUGET_VERSION)
    githubReleaseTitle: '$(nugetPackageName) Library v$(MY_NUGET_VERSION)'
    githubReleaseNotes: 'Check the [changelog]($(Build.Repository.Uri)/blob/$(Build.SourceBranchName)/CHANGELOG.md).<br><br><h4>Install from NuGet</h4><br>The following NuGet packages are available for download from this release:<br>:package: [.NET](https://www.nuget.org/packages/$(nugetPackageName)/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION).'
    githubTargetCommitsh: $(Build.SourceVersion)
    githubReleaseDraft: false
    githubReleasePrerelease: false
    githubReuseDraftOnly: false
    githubReuseRelease: true
    githubEditRelease: true
    githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/$(nugetPackageName).$(MY_NUGET_VERSION).nupkg'
  condition: and( succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v') )
  displayName: Create/Update GitHub release

# update assembly declaration in nf-interpreter
- task: UpdateNativeAssemblyDeclaration@1
  inputs:
    sourceFileName: '${{ parameters.sourceFileName }}'
    classLibName: '${{ parameters.classLibName }}'
    gitHubToken: $(GitHubToken)
    nuGetVersion: $(MY_NUGET_VERSION)
    assemblyVersion: $(NBGV_AssemblyVersion)
  condition: and( succeeded(), not( ${{ parameters.skipNativeUpdate }} ), startsWith(variables['Build.SourceBranch'], 'refs/tags/v') )
  displayName: Update assembly declaration in nf-interpreter
